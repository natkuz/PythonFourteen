# üìå–ù–∞ —Å–µ–º–∏–Ω–∞—Ä–µ 13 –±—ã–ª —Å–æ–∑–¥–∞–Ω –ø—Ä–æ–µ–∫—Ç –ø–æ —Ä–∞–±–æ—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–∏–º—è, id, —É—Ä–æ–≤–µ–Ω—å).
# üìå–ù–∞–ø–∏—à–∏—Ç–µ 3-7 —Ç–µ—Å—Ç–æ–≤ unittest –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.
# üìå–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ setUp

import unittest
from PythonFourteen import user_class

class TestUser(unittest.TestCase):
    def setUp(self) -> None:
        self.user_one = user_class.User('–ê–Ω—Ç–æ–Ω –ü', '546', 6)
        self.user_two = user_class.User('–í–∞—Å–∏–ª–∏—Å–∞ –ê–µ–Ω–¥—Ä–µ–µ–≤–Ω–∞', '256', 3)
        self.user_three = user_class.User('–ü–µ—Ç—Ä –ò–≤–∞–Ω–æ–≤', '222', 5)
        self.user_base = user_class.Terminal()
        self.login_user = self.user_base.login('–í–∞—Å–∏–ª–∏—Å–∞ –ê–µ–Ω–¥—Ä–µ–µ–≤–Ω–∞', '000256')
        
    def test_str(self):
        self.assertEqual(self.user_two.__str__(), '–ò–º—è: –í–∞—Å–∏–ª–∏—Å–∞ –ê–µ–Ω–¥—Ä–µ–µ–≤–Ω–∞ (000256) -- –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: 3')

    def test_eq(self):
        self.assertEqual(self.user_two, self.user_two)
        self.assertFalse(self.user_one == self.user_two)
        
    def test_login(self):
        self.assertTrue(self.login_user, '–ò–º—è: –í–∞—Å–∏–ª–∏—Å–∞ –ê–µ–Ω–¥—Ä–µ–µ–≤–Ω–∞ (000256) -- –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: 3')

    def test_create_user(self):
        self.assertTrue(user_class.Terminal().create_new_user(self.user_two, self.user_three)
                        == '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ü–µ—Ç—Ä –ò–≤–∞–Ω–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω')


if __name__ == '__main__':
    unittest.main(verbosity=2)